name: FloatChat CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports
      run: |
        python -c "import backend.main; print('Backend imports OK')"
        python -c "import frontend.app; print('Frontend imports OK')"
    
    - name: Run tests
      run: |
        python test_serialization.py
        python test_visualization_fix.py
      env:
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t floatchat:test .
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name floatchat-test -p 8000:8000 floatchat:test
        sleep 30
        curl -f http://localhost:8000/ || exit 1
        docker stop floatchat-test

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Ready for production deployment!"
        echo "Add your deployment commands here"
        # Example: Deploy to cloud platform
        # heroku container:push web --app your-app-name
        # heroku container:release web --app your-app-name